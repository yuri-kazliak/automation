name: do-deploy-no-dh

on:
  workflow_call:
    inputs:
      # image_name:
      #   description: "Image Name"
      #   required: true
      #   type: string
      docker_container_name:
        description: "Docker container Name"
        required: true
        type: string
      do_host:
        description: "Digital Ocean host"
        required: true
        type: string
      do_username:
        description: "Digital Ocean username"
        required: true
        type: string
      git_project_name:
        description: "Git repo name"
        required: true
        type: string
    secrets:
      do_ssh_key:
        description: "Docker Hub token"
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  digital-ocean-deploy:
    runs-on: ubuntu-latest
    if: ${{ github.ref_name }}

    steps:
      - name: Checkout files
        uses: actions/checkout@v2
      - name: read var
        run: |
          echo "inputs.docker_container_name ${{ inputs.docker_container_name }}"
          echo "inputs.do_username ${{ inputs.do_username }}"
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ inputs.do_host }}
          username: ${{ inputs.do_username }}
          key: ${{ secrets.do_ssh_key }}
          script: |

            # # Stop running container
            # docker container stop ${{ inputs.docker_container_name }}
            # # Remove old container
            # docker container rm -f ${{ inputs.docker_container_name }}
            # # Remove old images
            # docker images -a | grep "${{ inputs.docker_container_name }}" | awk '{print $1":"$2}' | xargs docker rmi
            mkdir -p repos
            cd repos
            rm -rf ${{ inputs.git_project_name }}
            git clone https://github.com/yuri-kazliak/${{ inputs.git_project_name }}.git
            # git clone git@github.com:yuri-kazliak/${{ inputs.git_project_name }}.git
            cd ${{ inputs.git_project_name }}
            docker compose up -d
            # # Pull a new container
            # docker image pull $(echo ${{ inputs.image_name }})
            # # Run a new container from a new image
            # if [ ${{ inputs.docker_port_mapping }} ]
            # then
            #   docker run -d \
            #   --restart always \
            #   --name $(echo ${{ inputs.docker_container_name }}) \
            #   -p $(echo ${{ inputs.docker_port_mapping }}):8000 \
            #   $(echo ${{ inputs.image_name }})
            # else 
            #   docker run -d \
            #   --restart always \
            #   --name $(echo ${{ inputs.docker_container_name }}) \
            #   $(echo ${{ inputs.image_name }})
            # fi